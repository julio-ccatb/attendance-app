// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

generator zod {
    provider                  = "zod-prisma-types"
    createPartialTypes        = "true"
    createRelationValuesTypes = "true"
    useMultipleFiles          = "true"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String       @id @default(cuid())
    name              String?
    email             String?      @unique
    emailVerified     DateTime?
    image             String?
    roles             Role[]       @default([READER])
    accounts          Account[]
    sessions          Session[]
    // Relations
    attendanceRecords Attendance[] // Attendance records managed by this user
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Volunteer {
    id          Int          @id @default(autoincrement())
    name        String
    uniqueId    String       @unique // Unique ID to identify the volunteer
    phone       String? // Optional phone number
    email       String? // Optional email
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    // Relations
    attendances Attendance[] // Relation to track volunteer attendances
}

model Attendance {
    id          Int              @id @default(autoincrement())
    dateTime    DateTime         @default(now()) // Date and time of the attendance
    status      AttendanceStatus // Present, Absent, Late, etc.
    activityId  Int // Links the attendance to a specific activity
    volunteerId Int // Links the attendance to a volunteer
    userId      String // User who registered the attendance
    hoursValue  Int // Number of hours value for the attendance
    // Relations
    volunteer   Volunteer        @relation(fields: [volunteerId], references: [id])
    activity    Activity         @relation(fields: [activityId], references: [id])
    user        User             @relation(fields: [userId], references: [id])
}

model Activity {
    id            Int          @id @default(autoincrement())
    name          String
    description   String?
    dateStart     DateTime // Date of the activity
    dateEnd       DateTime?
    durationHours Int?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    // Relations
    attendances   Attendance[] // Attendances linked to this activity
}

enum Role {
    ADMIN
    OPERATOR
    READER
}

enum AttendanceStatus {
    PRESENT
    ABSENT
    LATE
}
